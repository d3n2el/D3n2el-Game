:root {
    --primary-text-color: #1a1a1a;
    --transition-ease: ease;
    --transition-speed: 0.3s;
    --secondary-text-color: #f7f7f7;
    --border-radius-full: 9999px;
    --background-dark: #1a1a1a;
    --accent-color: #555555; 
    --background-light: #f5f5f5;
    --slide-transition-speed: 07s;
    --slide-transition-ease: ease-out;
    --fun-color: #FF36CD;
    --fun-background: #D2D8FF;

}
/* should apply to all html, I really want to remove the scrolling that is occuring rn */
html {
    height: 100%;
    overflow: hidden;
}

.jost-name-font {
  font-family: "Jost", sans-serif;
  font-optical-sizing: auto;
  font-weight: 100;
  font-style: normal;

}

.jolly-name-font {
  font-family: "Jolly Lodger", system-ui;
  font-weight: 400;
  font-style: normal;
}
body.jost-name-font{
    font-family: inherit;
    font-optical-sizing: inherit;
    font-weight: inherit;
    font-style: inherit;
    margin: 0;
    padding: 0;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    box-sizing: border-box;
    min-height: 100vh;
    background-color: #f5f5f5;
    width: 100%;
}
/* background animation */
@keyframes subtle-fade { 
    0% { background-color: #f7f7f7; }
    50% { background-color: #f9f9f9; }
    100% { background-color: #f7f7f7; }
}
body.animated-bg {
    animation: subtle-fade 10s infinite alternate;
}
.main-name {
    font-size: clamp(12rem, 30vw, 22rem); 
    font-weight: 400; /* way too bold otherwise, want something more sleek */
    color: var(--primary-text-color);
    line-height: 0.9; 
    letter-spacing: -0.04em; 
    margin-top: auto;
    margin-bottom: auto;
    cursor: default; 
    transition: all var(--transition-speed) var(--transition-ease); 
    width: auto;
    max-width: 100%;
    max-height: 70vh;
    text-align: center;
    align-items: flex-end;
    overflow: hidden;
    display: flex;
    margin-bottom: 0.05em;
}
.container-center {
    min-height: -webkit-fill-available;
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    align-items: center;
    padding-bottom: 5vh; 
    background-color: var(--background-light);
    padding-left: 0;
    padding-right: 0;
    margin: 0;
    position: relative;
}
.button-stack-wrapper {
    position: relative; /* Establish a positioning context for absolute children */
    width: clamp(60px, 10vw, 100px); /* Match the dimensions of the buttons inside */
    height: clamp(60px, 10vw, 100px); /* Match the dimensions of the buttons inside */
    display: flex; /* Helps in centering the buttons within the wrapper if needed */
    justify-content: center;
    align-items: center;
}
.circle-button, .star-button {
    position: absolute; /* Take them out of normal flow and stack them */
    top: 0;
    left: 0;
    /* Ensure they fill the wrapper or are centered within it */
    width: 100%;
    height: 100%;
    box-sizing: border-box; /* Include padding and border in the element's total width and height */
}
/* will add tons of comments because im looking up a lot of syntax on google and so i will start with some values, end up with others
but at least with comments i remember what they do */
 .circle-button {
            width: clamp(60px, 10vw, 100px); 
            height: clamp(60px, 10vw, 100px);
            border: 2px solid var(--primary-text-color); /* border style, need to define all the variables later in roots */
            border-radius: var(--border-radius-full);
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: transparent;
            cursor: pointer; /* to make people comprehend that its a button to CLICK */
            overflow: hidden; 
            appearance: none; 
            -webkit-appearance: none; /* remove browser interference */
            touch-action: manipulation; /* tell browser  how to handle input, manip is to tell things like zooming are handled by the page so avoid 2 tap to zoom etc */
            transition: all var(--transition-speed) var(--transition-ease);
            will-change: transform, background-color, border-color; /* tells browser to prepare for animation, beter to avoid lag between animations and ruing the aesthetics */

 }
 /* now i'll code the lines and AFTER i will understand how i want to animate it all */
.circle-button .plus-lines-container,
.nav-button .plus-lines-container {
    position: absolute;
    top: 50%; /* middle circle */
    left: 50%; /* same reason as before*/
    transform: translate(-50%, -50%);
    width: 60%; /* trying to specify these values to see if anything changes, as of rn, it doesnt work. It does work after specifying */
    height: 60%; 
    display: flex;
    justify-content: center; 
    align-items: center;
    opacity: 1; 
}
.circle-button .plus-line,
.nav-button .plus-line { /* class to avoid duplicate code in both lines, which is always good pratice afaik */
    position: absolute;
    background-color: var(--primary-text-color);
    border-radius: 1px;
    transition: transform var(--transition-speed) var(--transition-ease);
}
.circle-button .plus-line-horizontal,
.nav-button .plus-line-horizontal{
    width: 100%;
    height: 2px; /* should be line thickness so i'll make it really thin */
    top: 50%;
    left: 0%; /*since it needs to be horizontal and touch the corners*/
    transform: translateY(-50%); /* otherwise it will start drawing from the half and thus not be truly centered*/
}

.circle-button .plus-line-vertical,
.nav-button .plus-line-vertical{
    height: 100%;
    width: 2px;
    left: 50%;
    top:0%;
    /* same but opposite*/
    transform: translateX(-50%); 
}
.circle-button .explore-text {
    font-size: clamp(0.8rem, 2vw, 1rem);
    font-weight: 400;
    color: var(--primary-text-color);
    opacity: 0;
    transform: translateY(100%);
    position: absolute;
    transition: opacity var(--transition-speed) var(--transition-ease), transform var(--transition-speed) var(--transition-ease);
}

/* Hover states for circle button */
.circle-button:hover {
    background-color: var(--primary-text-color);
    border-color: var(--primary-text-color);
    transform: scale(1.05);
}
.circle-button:hover .explore-text {
    opacity: 1;
    transform: translateY(0); /*change the value to completely out of object to normal to make it appear */
    color: var(--secondary-text-color);
}
.circle-button:hover .plus-lines-container {
    opacity: 0; /* + sign disappears*/
    transform: translate(-50%, -150%); /* Moves the plus sign off-screen upwards */
}

.circle-button.active {
    opacity: 0;

}
.star-button{
    width: clamp(60px, 10vw, 100px); 
    height: clamp(60px, 10vw, 100px);
    border: 2px solid var(--fun-color);
    border-radius: var(--border-radius-full);
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: transparent;
    cursor: pointer; 
    overflow: hidden; 
    appearance: none; 
    -webkit-appearance: none; 
    touch-action: manipulation; 
    transition: all var(--transition-speed) var(--transition-ease);
    will-change: transform; 
    opacity: 0;
    pointer-events: none;
}
.star{
    font-size: clamp(60px,10vw,100px);
    color: var(--fun-color);
}
.star-button.active{
    opacity: 1;
    pointer-events: auto;
}
.star:hover {
    /* Rotates the star 180 degrees, then translates it down by 15px. */
    /* Adjust '15px' if you need a different vertical alignment. */
    transform: rotate(180deg) translateY(-15px);
}



.main-name:hover {
    color: var(--accent-color)
}

.rectangle-button {
    width: clamp(100px, 20vw, 200px);
    height: clamp(60px,10vw,100px);
    border-radius: 50px;
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    padding-left: 50px;
    position: absolute;
    background-color: var(--background-dark);
    cursor: pointer;
    overflow: hidden;
    left: 10%;
    bottom: 5vh;
    transition: all var(--transition-speed) var(--transition-ease);
}

.rectangle-button .circle-left{
    width: clamp(60px,10vw,100px);
    height: clamp(60px,10vw,100px);
    border-radius: var(--border-radius-full);
    background-color: var(--accent-color);
    z-index: 2;
    position: absolute;
    top: 0;
    left: 0%;
    opacity: 1;
    transition: transform var(--transition-speed) var(--transition-ease), opacity var(--transition-speed) var(--transition-ease);
}
.rectangle-button .circle-right{
    width: clamp(60px,10vw,100px);
    height: clamp(60px,10vw,100px);
    border-radius: var(--border-radius-full);
    z-index: 2;
    position: absolute;
    margin: 0;
    padding: 0;
    right: 0;
    top:0;
    opacity: 0;
    background-color: var(--fun-color);
    transition: transform var(--transition-speed) var(--transition-ease), opacity var(--transition-speed) var(--transition-ease) ;
}
.rectangle-button.active{
    background-color: var(--fun-background);
}
.rectangle-button.active .circle-left{
    opacity: 0;
    transform: scale(0.5);
}
.rectangle-button.active .circle-right{
    opacity: 1;
    transform: scale(1);
}
.main-name.active {
    color: var(--fun-color);
    font-family: "Jolly Lodger", system-ui;
}
.main-name.active:hover {
    color: var(--fun-background);
}




.slides-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    width: 100vw;
    height: 100vh;
    justify-content: center;
    align-items: center;
    z-index: 10; /* so that its at top*/
    opacity: 0; /* so that it is hidden at start, will change after when + is clicked*/
    visibility: hidden; /*same reason*/
    transition: opacity var(--transition-speed) var(--transition-ease) visibility var(--transition-speed) var(--transition-ease);
    pointer-events: none;
}
.slides-overlay.visible {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
}

.slides-container {
    position: relative; 
    width: 100vw;
    height:100vh;
    max-width: 100vw;
    max-height: 100vh;
    background-color: var(--background-light);
    border-radius: 0;
    box-shadow: none;
    overflow: hidden; /* in case it overflows during transitions*/
    display: flex;
    flex-direction: column;
    padding: 0;
    box-sizing: border-box;
}
.slide-item {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    text-align: center;
    padding: 2rem;
    opacity: 0;
    transition: opacity var(--slide-transition-speed) var(--slide-transition-ease),
     transform var(--slide-transition-speed) var(--slide-transition-ease);
    background-color: var(--background-light);
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
}

.slide-item.active{
    opacity: 1;
    transform: translateX(0);
    z-index: 20;
}
/* styling paragraph in slide-item */
.slide-item p{
    font-size: clamp(0.9rem, 2vw, 1.1rem); 
    line-height: 1.6; 
    max-width: 800px; 
    margin-bottom: 1rem; 
    font-family: "JetBrains Mono", monospace;
    font-optical-sizing: auto;
    font-weight: 400;
    font-style: normal;
}




.nav-button {
    z-index: 100;
    position: absolute;
    top: 50%;
    background-color: transparent;
    border-radius: var(--border-radius-full);
    color: var(--primary-text-color);
    width: clamp(40px,6vw,60px);
    height: clamp(40px,6vw,60px);
    cursor: pointer;
    transition: background-color var(--transition-speed) var(--transition-ease), color var(--transition-speed) var(--transition-ease);
    appearance: none;
    -webkit-appearance: none;
    touch-action: manipulation;
}

.nav-button:hover{
    background-color: var(--background-dark);
    color: var(--secondary-text-color);
}
.nav-button:hover .plus-line{
    background-color: var(--secondary-text-color);
}
.nav-button:disabled{
    opacity: 0.4;
    cursor: not-allowed;
    color: var(--primary-text-color);
    background-color: var(--background-light);
}
.nav-button.prev {
    left: 2rem;
}

.nav-button.next {
    right: 2rem;
}
.nav-button.prev .plus-lines-container{
    transform: translate(-50%, -50%);
}

.close-button {
  z-index: 100;
  position: absolute;
  top: 2rem;
  right: 2rem;
  background: none;
  border: none;
  color: var(--primary-text-color);
  font-size: 2rem;
  cursor: pointer;
}

.close-button:hover {
    transform: rotate(90deg); 
}


.title-slide {
    font-family: "TIMMONSNY";
    font-size: 250px;
    font-style: normal;
    font-weight: 400;
    line-height: normal;
}
.title-slide.language{
    color: #C2DF43
}
.title-slide.business {
    color: #000;
}
.title-slide.sport {
    color: #C22929;
}
.title-slide.socialMedia {
    color: #B18355;
}
.title-slide.psychology {
    color: #A53AC9;
}

.title-slide.traveling{
    color: #DCE2B3;
}
.title-slide.computerScience {
    color: #9499EF;
}
.imageSlide {
    width: 1014px;
    height: 675px;
    flex-shrink: 0;
    aspect-ratio: 338/225;
    border-radius: 129px;
}

